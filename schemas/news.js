import { FiCode, FiImage, FiUser } from 'react-icons/fi'
import { LuMail } from "react-icons/lu";
import { MdLink } from "react-icons/md";
import { FaAnchor } from "react-icons/fa";
import { FaAnchorLock } from "react-icons/fa6";

import slugify from '../utils/slugify'

export default {
  title: "News",
  name: 'news',
  type: "document",
  fields: [
    {
      title: "Title",
      name: "title",
      type: "string",
      validation: Rule => Rule.required()
    },
    {
      title: "Order Rank",
      name: "orderRank",
      type: "string",
      hidden: true,
    },
    {
      title: "Category",
      name: "category",
      type: "reference",
      to: [{type: 'categories'}],
      validation: Rule => Rule.required()
    },
    {
      title: "Post Date",
      name: "postDate",
      type: "date",
      options: {
        dateFormat: 'DD-MM-YYYY',
        calendarTodayLabel: 'Today'
      },
      validation: Rule => Rule.required()
    },
    {
      title: "Teaser Image",
      name: "teaserImage",
      type: "defaultImage",
      description: "The image used as a teaser for this article when it's in the main news grid",
      validation: Rule => Rule.required()
    },
    {
      title: "Hero Image",
      name: "heroImage",
      type: "defaultImage",
      description: "The (ideally landscape) image used as a hero within this article",
    },
    {
      title: "Intro Text",
      name: "introText",
      type: "text",
      rows: 4,
      validation: Rule => Rule.required()
    },
    {
      title: 'Content', 
      name: 'content',
      type: 'array', 
      of: [
        {type: 'block', marks: {
          annotations: [
            {
              name: "anchorLink",
              icon: FaAnchor,
              title: "Anchor Link",
              type: "object",
              fields: [
                {
                  name: "href",
                  title: "URL",
                  type: "string", // Change to string if you want anchor IDs (e.g., "#section")
                  validation: (Rule) => Rule.required(),
                },
              ],
            },
            {
              name: "anchorId",
              icon: FaAnchorLock,
              title: "Anchor ID",
              type: "object",
              fields: [
                {
                  name: "anchorId", // Match with serializer naming
                  title: "Anchor ID",
                  type: "string",
                  validation: (Rule) => Rule.required(),
                },
              ],
              description: "Add a unique ID for internal linking.",
            },
            {
              name: 'link',
              type: 'object',
              title: 'External link',
              fields: [
                {
                  name: 'href',
                  type: 'url',
                  title: 'URL'
                },
                {
                  title: 'Open in new tab',
                  name: 'blank',
                  type: 'boolean'
                }
              ]
            },
            {
              name: 'internalLink',
              icon: MdLink,
              type: 'object',
              title: 'Internal link',
              fields: [
                {
                  name: 'reference',
                  type: 'reference',
                  title: 'Reference',
                  to: [
                    {type: 'home'},
                    {type: 'about'},
                    {type: 'categories'},
                    {type: 'news'},
                    {type: 'contact'},
                    {type: 'newsLanding'},
                    {type: 'policies'},
                    {type: 'whatsOn'},
                    // other types you may want to link to
                  ]
                }
              ]
            },
            {
              name: 'mailToLink',
              type: 'object',
              title :'Mailto Link',
              icon: LuMail,
              fields: [
                {
                  name: 'email',
                  type: 'email',
                  title: 'Email'
                }
              ]
            }
          ]
        }},
        {type: 'embed', name: 'Embed', icon: FiCode },
        {type: 'blockQuote', name: 'Quote', icon: FiUser },
        {type: 'inlineImage', name: 'Image', icon: FiImage}
        
      ],
      validation: Rule => Rule.required()
    },
    {
      title: 'Related News Posts',
      name: 'customRelated',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{ type : 'news' }]
        }
      ],
      validation: Rule => Rule.max(3)
    },
    {
      name: 'slug',
      type: 'slug',
      title: 'Slug',
      description: 'This is required for page routing and can be auto-generated by pressing "generate"',
      options: {
        source: (doc) => {
          let titleSlug = ''
          let campaignSlug = ''
          if (doc.title) {
            titleSlug = `${doc.title}`
          } else {
            titleSlug = ''
          }

          if (doc.campaignTitle) {
            campaignSlug = `-${doc.campaignTitle}`
          } else {
            campaignSlug = ''
          }

          return `${titleSlug}${campaignSlug}`;
        },
        maxLength: 96,
        slugify: (input) => slugify(`${input}`)
      },
      validation: Rule => Rule.required()
    },
    {
      title: 'SEO / Share Settings',
      name: 'seo',
      type: 'seo'
    }
  ],
  orderings: [
    {
      title: 'Post Date',
      name: 'postDateDesc',
      by: [
        {field: 'postDate', direction: 'desc'}
      ]
    }
  ],
  preview: {
    select: {
      title: 'title',
      image: 'teaserImage',
      postDate: 'postDate'
    },
    prepare ({ title, postDate, image }) {
      return {
        title: title,
        subtitle: postDate,
        media: image
      }
    }
  }
}